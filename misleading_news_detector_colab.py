# -*- coding: utf-8 -*-
"""misleading_news_detector_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hm0g8MX52kqiKIFo_afKGouILcGwIRKb
"""

!pip install transformers gradio sentencepiece datasets --quiet

import gradio as gr
from transformers import pipeline
import re

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def extract_action_items(text):
    """
    Extracts action items based on trigger patterns.
    """
    patterns = [
        r"\bwill\b.*?(?:\.|$)",
        r"\bneed to\b.*?(?:\.|$)",
        r"\bshould\b.*?(?:\.|$)",
        r"\bassign\b.*?(?:\.|$)",
        r"\bdeadline\b.*?(?:\.|$)"
    ]
    action_items = []
    for pattern in patterns:
        matches = re.findall(pattern, text, flags=re.IGNORECASE)
        action_items.extend([m.strip() for m in matches])
    return list(set(action_items))  # remove duplicates

def process_meeting(meeting_text):
    # Summarize
    summary = summarizer(meeting_text, max_length=130, min_length=30, do_sample=False)[0]['summary_text']

    # Extract action items
    actions = extract_action_items(meeting_text)

    # Format output
    if actions:
        actions_str = "\n".join(f"- {a}" for a in actions)
    else:
        actions_str = "No clear action items found."

    return summary, actions_str

with gr.Blocks() as demo:
    gr.Markdown("# ðŸ“‹ Smart Meeting Summarizer & Action Item Extractor")
    gr.Markdown("Paste meeting transcript text below and get a concise summary plus action items.")

    input_text = gr.Textbox(label="Meeting Transcript", lines=12, placeholder="Paste your meeting text here...")
    summary_output = gr.Textbox(label="Meeting Summary", lines=6)
    actions_output = gr.Textbox(label="Action Items", lines=6)

    run_btn = gr.Button("Process")
    run_btn.click(process_meeting, inputs=input_text, outputs=[summary_output, actions_output])

demo.launch(debug=True)

